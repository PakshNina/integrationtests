// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_ourservice is a generated GoMock package.
package mock_ourservice

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockbirthdaysRepo is a mock of birthdaysRepo interface.
type MockbirthdaysRepo struct {
	ctrl     *gomock.Controller
	recorder *MockbirthdaysRepoMockRecorder
}

// MockbirthdaysRepoMockRecorder is the mock recorder for MockbirthdaysRepo.
type MockbirthdaysRepoMockRecorder struct {
	mock *MockbirthdaysRepo
}

// NewMockbirthdaysRepo creates a new mock instance.
func NewMockbirthdaysRepo(ctrl *gomock.Controller) *MockbirthdaysRepo {
	mock := &MockbirthdaysRepo{ctrl: ctrl}
	mock.recorder = &MockbirthdaysRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbirthdaysRepo) EXPECT() *MockbirthdaysRepoMockRecorder {
	return m.recorder
}

// GetBirthdayByID mocks base method.
func (m *MockbirthdaysRepo) GetBirthdayByID(userID uint32) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBirthdayByID", userID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBirthdayByID indicates an expected call of GetBirthdayByID.
func (mr *MockbirthdaysRepoMockRecorder) GetBirthdayByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBirthdayByID", reflect.TypeOf((*MockbirthdaysRepo)(nil).GetBirthdayByID), userID)
}

// Mockphonebook is a mock of phonebook interface.
type Mockphonebook struct {
	ctrl     *gomock.Controller
	recorder *MockphonebookMockRecorder
}

// MockphonebookMockRecorder is the mock recorder for Mockphonebook.
type MockphonebookMockRecorder struct {
	mock *Mockphonebook
}

// NewMockphonebook creates a new mock instance.
func NewMockphonebook(ctrl *gomock.Controller) *Mockphonebook {
	mock := &Mockphonebook{ctrl: ctrl}
	mock.recorder = &MockphonebookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockphonebook) EXPECT() *MockphonebookMockRecorder {
	return m.recorder
}

// GetUserIDByPhone mocks base method.
func (m *Mockphonebook) GetUserIDByPhone(phone string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByPhone", phone)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByPhone indicates an expected call of GetUserIDByPhone.
func (mr *MockphonebookMockRecorder) GetUserIDByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByPhone", reflect.TypeOf((*Mockphonebook)(nil).GetUserIDByPhone), phone)
}

// MockOurService is a mock of OurService interface.
type MockOurService struct {
	ctrl     *gomock.Controller
	recorder *MockOurServiceMockRecorder
}

// MockOurServiceMockRecorder is the mock recorder for MockOurService.
type MockOurServiceMockRecorder struct {
	mock *MockOurService
}

// NewMockOurService creates a new mock instance.
func NewMockOurService(ctrl *gomock.Controller) *MockOurService {
	mock := &MockOurService{ctrl: ctrl}
	mock.recorder = &MockOurServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOurService) EXPECT() *MockOurServiceMockRecorder {
	return m.recorder
}

// GetBirthdayByPhone mocks base method.
func (m *MockOurService) GetBirthdayByPhone(phone string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBirthdayByPhone", phone)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBirthdayByPhone indicates an expected call of GetBirthdayByPhone.
func (mr *MockOurServiceMockRecorder) GetBirthdayByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBirthdayByPhone", reflect.TypeOf((*MockOurService)(nil).GetBirthdayByPhone), phone)
}
